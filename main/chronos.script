function init(self)
	if not chronos then
		print('chronos is not supported on this platform')
		return
	end

	local socket_gettime = socket.gettime
	local chronos_time = chronos.time
	local chronos_tsc = chronos.tsc
	local chronos_tsc_time = chronos.tsc_time

	local frequency = chronos.frequency()
	local decimals = chronos.decimals()
	print(string.format('frequency: %d', frequency))
	print(string.format('decimals: %d', decimals))

	local start_gettime = socket_gettime()
	local start_time = chronos_time()
	local start_tsc = chronos_tsc()
	local tsc_overhead = chronos_tsc_time(start_tsc)
	print('starting values:')
	print(string.format('socket.gettime: %.7f', start_gettime))
	print(string.format('chronos.time:   %.' .. decimals .. 'f', start_time))
	print(string.format('chronos.tsc:    %d', start_tsc))
	print(string.format('tsc call overhead: ~%.9f', tsc_overhead))

	local function on_second()
		local gettime = socket_gettime()
		local time = chronos_time()
		local tsc_time, tsc_frequency = chronos_tsc_time(start_tsc)
		print(string.format('socket.gettime: %.7f', gettime - start_gettime))
		print(string.format('chronos.time:   %.' .. decimals .. 'f', time - start_time))
		print(string.format('chronos.tsc:    %.9f (frequency ~%.6fMhz)', tsc_time, tsc_frequency / 1000000))
	end

	local initial_delay = 1 - (chronos_time() - start_time)
	timer.delay(initial_delay, false, function()
		print('time passed:')
		on_second()
		timer.delay(1, true, on_second)
	end)
end
